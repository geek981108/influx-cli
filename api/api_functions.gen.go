/*
 * Subset of Influx API covered by Influx CLI
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	_context "context"
	_fmt "fmt"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type FunctionsApi interface {

	/*
	 * DeleteFunctionsID Delete a function
	 * Deletes a function and all associated records
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param functionID The ID of the function to delete.
	 * @return ApiDeleteFunctionsIDRequest
	 */
	DeleteFunctionsID(ctx _context.Context, functionID string) ApiDeleteFunctionsIDRequest

	/*
	 * DeleteFunctionsIDExecute executes the request
	 */
	DeleteFunctionsIDExecute(r ApiDeleteFunctionsIDRequest) error

	/*
	 * GetFunctions List all Functions
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiGetFunctionsRequest
	 */
	GetFunctions(ctx _context.Context) ApiGetFunctionsRequest

	/*
	 * GetFunctionsExecute executes the request
	 * @return Functions
	 */
	GetFunctionsExecute(r ApiGetFunctionsRequest) (Functions, error)

	/*
	 * GetFunctionsID Retrieve a function
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param functionID The function ID.
	 * @return ApiGetFunctionsIDRequest
	 */
	GetFunctionsID(ctx _context.Context, functionID string) ApiGetFunctionsIDRequest

	/*
	 * GetFunctionsIDExecute executes the request
	 * @return Function
	 */
	GetFunctionsIDExecute(r ApiGetFunctionsIDRequest) (Function, error)

	/*
	 * GetFunctionsIDInvoke Manually invoke a function with params in query
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param functionID
	 * @return ApiGetFunctionsIDInvokeRequest
	 */
	GetFunctionsIDInvoke(ctx _context.Context, functionID string) ApiGetFunctionsIDInvokeRequest

	/*
	 * GetFunctionsIDInvokeExecute executes the request
	 * @return map[string]interface{}
	 */
	GetFunctionsIDInvokeExecute(r ApiGetFunctionsIDInvokeRequest) (map[string]interface{}, error)

	/*
	 * PatchFunctionsID Update a function
	 * Update a function
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param functionID The function ID.
	 * @return ApiPatchFunctionsIDRequest
	 */
	PatchFunctionsID(ctx _context.Context, functionID string) ApiPatchFunctionsIDRequest

	/*
	 * PatchFunctionsIDExecute executes the request
	 * @return Function
	 */
	PatchFunctionsIDExecute(r ApiPatchFunctionsIDRequest) (Function, error)

	/*
	 * PostFunctions Create a new function
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @return ApiPostFunctionsRequest
	 */
	PostFunctions(ctx _context.Context) ApiPostFunctionsRequest

	/*
	 * PostFunctionsExecute executes the request
	 * @return Function
	 */
	PostFunctionsExecute(r ApiPostFunctionsRequest) (Function, error)

	/*
	 * PostFunctionsIDInvoke Manually invoke a function with params in request body
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param functionID
	 * @return ApiPostFunctionsIDInvokeRequest
	 */
	PostFunctionsIDInvoke(ctx _context.Context, functionID string) ApiPostFunctionsIDInvokeRequest

	/*
	 * PostFunctionsIDInvokeExecute executes the request
	 * @return string
	 */
	PostFunctionsIDInvokeExecute(r ApiPostFunctionsIDInvokeRequest) (string, error)

	// Sets additional descriptive text in the error message if any request in
	// this API fails, indicating that it is intended to be used only on OSS
	// servers.
	OnlyOSS() FunctionsApi

	// Sets additional descriptive text in the error message if any request in
	// this API fails, indicating that it is intended to be used only on cloud
	// servers.
	OnlyCloud() FunctionsApi
}

// FunctionsApiService FunctionsApi service
type FunctionsApiService service

func (a *FunctionsApiService) OnlyOSS() FunctionsApi {
	a.isOnlyOSS = true
	return a
}

func (a *FunctionsApiService) OnlyCloud() FunctionsApi {
	a.isOnlyCloud = true
	return a
}

type ApiDeleteFunctionsIDRequest struct {
	ctx        _context.Context
	ApiService FunctionsApi
	functionID string
}

func (r ApiDeleteFunctionsIDRequest) FunctionID(functionID string) ApiDeleteFunctionsIDRequest {
	r.functionID = functionID
	return r
}
func (r ApiDeleteFunctionsIDRequest) GetFunctionID() string {
	return r.functionID
}

func (r ApiDeleteFunctionsIDRequest) Execute() error {
	return r.ApiService.DeleteFunctionsIDExecute(r)
}

/*
 * DeleteFunctionsID Delete a function
 * Deletes a function and all associated records
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param functionID The ID of the function to delete.
 * @return ApiDeleteFunctionsIDRequest
 */
func (a *FunctionsApiService) DeleteFunctionsID(ctx _context.Context, functionID string) ApiDeleteFunctionsIDRequest {
	return ApiDeleteFunctionsIDRequest{
		ApiService: a,
		ctx:        ctx,
		functionID: functionID,
	}
}

/*
 * Execute executes the request
 */
func (a *FunctionsApiService) DeleteFunctionsIDExecute(r ApiDeleteFunctionsIDRequest) error {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.DeleteFunctionsID")
	if err != nil {
		return GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions/{functionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"functionID"+"}", _neturl.PathEscape(parameterToString(r.functionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return newErr
	}

	return nil
}

type ApiGetFunctionsRequest struct {
	ctx        _context.Context
	ApiService FunctionsApi
	org        *string
	orgID      *string
	limit      *int32
	offset     *int32
}

func (r ApiGetFunctionsRequest) Org(org string) ApiGetFunctionsRequest {
	r.org = &org
	return r
}
func (r ApiGetFunctionsRequest) GetOrg() *string {
	return r.org
}

func (r ApiGetFunctionsRequest) OrgID(orgID string) ApiGetFunctionsRequest {
	r.orgID = &orgID
	return r
}
func (r ApiGetFunctionsRequest) GetOrgID() *string {
	return r.orgID
}

func (r ApiGetFunctionsRequest) Limit(limit int32) ApiGetFunctionsRequest {
	r.limit = &limit
	return r
}
func (r ApiGetFunctionsRequest) GetLimit() *int32 {
	return r.limit
}

func (r ApiGetFunctionsRequest) Offset(offset int32) ApiGetFunctionsRequest {
	r.offset = &offset
	return r
}
func (r ApiGetFunctionsRequest) GetOffset() *int32 {
	return r.offset
}

func (r ApiGetFunctionsRequest) Execute() (Functions, error) {
	return r.ApiService.GetFunctionsExecute(r)
}

/*
 * GetFunctions List all Functions
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetFunctionsRequest
 */
func (a *FunctionsApiService) GetFunctions(ctx _context.Context) ApiGetFunctionsRequest {
	return ApiGetFunctionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Functions
 */
func (a *FunctionsApiService) GetFunctionsExecute(r ApiGetFunctionsRequest) (Functions, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Functions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.GetFunctions")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.org != nil {
		localVarQueryParams.Add("org", parameterToString(*r.org, ""))
	}
	if r.orgID != nil {
		localVarQueryParams.Add("orgID", parameterToString(*r.orgID, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return localVarReturnValue, newErr
	}

	body, err := GunzipIfNeeded(localVarHTTPResponse)
	if err != nil {
		body.Close()
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, err.Error()),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type ApiGetFunctionsIDRequest struct {
	ctx        _context.Context
	ApiService FunctionsApi
	functionID string
}

func (r ApiGetFunctionsIDRequest) FunctionID(functionID string) ApiGetFunctionsIDRequest {
	r.functionID = functionID
	return r
}
func (r ApiGetFunctionsIDRequest) GetFunctionID() string {
	return r.functionID
}

func (r ApiGetFunctionsIDRequest) Execute() (Function, error) {
	return r.ApiService.GetFunctionsIDExecute(r)
}

/*
 * GetFunctionsID Retrieve a function
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param functionID The function ID.
 * @return ApiGetFunctionsIDRequest
 */
func (a *FunctionsApiService) GetFunctionsID(ctx _context.Context, functionID string) ApiGetFunctionsIDRequest {
	return ApiGetFunctionsIDRequest{
		ApiService: a,
		ctx:        ctx,
		functionID: functionID,
	}
}

/*
 * Execute executes the request
 * @return Function
 */
func (a *FunctionsApiService) GetFunctionsIDExecute(r ApiGetFunctionsIDRequest) (Function, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Function
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.GetFunctionsID")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions/{functionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"functionID"+"}", _neturl.PathEscape(parameterToString(r.functionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return localVarReturnValue, newErr
	}

	body, err := GunzipIfNeeded(localVarHTTPResponse)
	if err != nil {
		body.Close()
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, err.Error()),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type ApiGetFunctionsIDInvokeRequest struct {
	ctx        _context.Context
	ApiService FunctionsApi
	functionID string
	params     *map[string]map[string]interface{}
}

func (r ApiGetFunctionsIDInvokeRequest) FunctionID(functionID string) ApiGetFunctionsIDInvokeRequest {
	r.functionID = functionID
	return r
}
func (r ApiGetFunctionsIDInvokeRequest) GetFunctionID() string {
	return r.functionID
}

func (r ApiGetFunctionsIDInvokeRequest) Params(params map[string]map[string]interface{}) ApiGetFunctionsIDInvokeRequest {
	r.params = &params
	return r
}
func (r ApiGetFunctionsIDInvokeRequest) GetParams() *map[string]map[string]interface{} {
	return r.params
}

func (r ApiGetFunctionsIDInvokeRequest) Execute() (map[string]interface{}, error) {
	return r.ApiService.GetFunctionsIDInvokeExecute(r)
}

/*
 * GetFunctionsIDInvoke Manually invoke a function with params in query
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param functionID
 * @return ApiGetFunctionsIDInvokeRequest
 */
func (a *FunctionsApiService) GetFunctionsIDInvoke(ctx _context.Context, functionID string) ApiGetFunctionsIDInvokeRequest {
	return ApiGetFunctionsIDInvokeRequest{
		ApiService: a,
		ctx:        ctx,
		functionID: functionID,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *FunctionsApiService) GetFunctionsIDInvokeExecute(r ApiGetFunctionsIDInvokeRequest) (map[string]interface{}, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.GetFunctionsIDInvoke")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions/{functionID}/invoke"
	localVarPath = strings.Replace(localVarPath, "{"+"functionID"+"}", _neturl.PathEscape(parameterToString(r.functionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.params != nil {
		localVarQueryParams.Add("params", parameterToString(*r.params, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return localVarReturnValue, newErr
	}

	body, err := GunzipIfNeeded(localVarHTTPResponse)
	if err != nil {
		body.Close()
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, err.Error()),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type ApiPatchFunctionsIDRequest struct {
	ctx                   _context.Context
	ApiService            FunctionsApi
	functionID            string
	functionUpdateRequest *FunctionUpdateRequest
}

func (r ApiPatchFunctionsIDRequest) FunctionID(functionID string) ApiPatchFunctionsIDRequest {
	r.functionID = functionID
	return r
}
func (r ApiPatchFunctionsIDRequest) GetFunctionID() string {
	return r.functionID
}

func (r ApiPatchFunctionsIDRequest) FunctionUpdateRequest(functionUpdateRequest FunctionUpdateRequest) ApiPatchFunctionsIDRequest {
	r.functionUpdateRequest = &functionUpdateRequest
	return r
}
func (r ApiPatchFunctionsIDRequest) GetFunctionUpdateRequest() *FunctionUpdateRequest {
	return r.functionUpdateRequest
}

func (r ApiPatchFunctionsIDRequest) Execute() (Function, error) {
	return r.ApiService.PatchFunctionsIDExecute(r)
}

/*
 * PatchFunctionsID Update a function
 * Update a function
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param functionID The function ID.
 * @return ApiPatchFunctionsIDRequest
 */
func (a *FunctionsApiService) PatchFunctionsID(ctx _context.Context, functionID string) ApiPatchFunctionsIDRequest {
	return ApiPatchFunctionsIDRequest{
		ApiService: a,
		ctx:        ctx,
		functionID: functionID,
	}
}

/*
 * Execute executes the request
 * @return Function
 */
func (a *FunctionsApiService) PatchFunctionsIDExecute(r ApiPatchFunctionsIDRequest) (Function, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Function
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.PatchFunctionsID")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions/{functionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"functionID"+"}", _neturl.PathEscape(parameterToString(r.functionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.functionUpdateRequest == nil {
		return localVarReturnValue, reportError("functionUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.functionUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return localVarReturnValue, newErr
	}

	body, err := GunzipIfNeeded(localVarHTTPResponse)
	if err != nil {
		body.Close()
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, err.Error()),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type ApiPostFunctionsRequest struct {
	ctx                   _context.Context
	ApiService            FunctionsApi
	functionCreateRequest *FunctionCreateRequest
}

func (r ApiPostFunctionsRequest) FunctionCreateRequest(functionCreateRequest FunctionCreateRequest) ApiPostFunctionsRequest {
	r.functionCreateRequest = &functionCreateRequest
	return r
}
func (r ApiPostFunctionsRequest) GetFunctionCreateRequest() *FunctionCreateRequest {
	return r.functionCreateRequest
}

func (r ApiPostFunctionsRequest) Execute() (Function, error) {
	return r.ApiService.PostFunctionsExecute(r)
}

/*
 * PostFunctions Create a new function
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPostFunctionsRequest
 */
func (a *FunctionsApiService) PostFunctions(ctx _context.Context) ApiPostFunctionsRequest {
	return ApiPostFunctionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return Function
 */
func (a *FunctionsApiService) PostFunctionsExecute(r ApiPostFunctionsRequest) (Function, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Function
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.PostFunctions")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.functionCreateRequest == nil {
		return localVarReturnValue, reportError("functionCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.functionCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return localVarReturnValue, newErr
	}

	body, err := GunzipIfNeeded(localVarHTTPResponse)
	if err != nil {
		body.Close()
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, err.Error()),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}

type ApiPostFunctionsIDInvokeRequest struct {
	ctx                      _context.Context
	ApiService               FunctionsApi
	functionID               string
	functionInvocationParams *FunctionInvocationParams
}

func (r ApiPostFunctionsIDInvokeRequest) FunctionID(functionID string) ApiPostFunctionsIDInvokeRequest {
	r.functionID = functionID
	return r
}
func (r ApiPostFunctionsIDInvokeRequest) GetFunctionID() string {
	return r.functionID
}

func (r ApiPostFunctionsIDInvokeRequest) FunctionInvocationParams(functionInvocationParams FunctionInvocationParams) ApiPostFunctionsIDInvokeRequest {
	r.functionInvocationParams = &functionInvocationParams
	return r
}
func (r ApiPostFunctionsIDInvokeRequest) GetFunctionInvocationParams() *FunctionInvocationParams {
	return r.functionInvocationParams
}

func (r ApiPostFunctionsIDInvokeRequest) Execute() (string, error) {
	return r.ApiService.PostFunctionsIDInvokeExecute(r)
}

/*
 * PostFunctionsIDInvoke Manually invoke a function with params in request body
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param functionID
 * @return ApiPostFunctionsIDInvokeRequest
 */
func (a *FunctionsApiService) PostFunctionsIDInvoke(ctx _context.Context, functionID string) ApiPostFunctionsIDInvokeRequest {
	return ApiPostFunctionsIDInvokeRequest{
		ApiService: a,
		ctx:        ctx,
		functionID: functionID,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *FunctionsApiService) PostFunctionsIDInvokeExecute(r ApiPostFunctionsIDInvokeRequest) (string, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FunctionsApiService.PostFunctionsIDInvoke")
	if err != nil {
		return localVarReturnValue, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/functions/{functionID}/invoke"
	localVarPath = strings.Replace(localVarPath, "{"+"functionID"+"}", _neturl.PathEscape(parameterToString(r.functionID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.functionInvocationParams
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, err
	}

	var errorPrefix string
	if a.isOnlyOSS {
		errorPrefix = "InfluxDB OSS-only command failed: "
	} else if a.isOnlyCloud {
		errorPrefix = "InfluxDB Cloud-only command failed: "
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		body, err := GunzipIfNeeded(localVarHTTPResponse)
		if err != nil {
			body.Close()
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		localVarBody, err := _ioutil.ReadAll(body)
		body.Close()
		if err != nil {
			return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
		}
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, localVarHTTPResponse.Status),
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = _fmt.Sprintf("%s%v", errorPrefix, err.Error())
			return localVarReturnValue, newErr
		}
		newErr.model = &v
		newErr.error = _fmt.Sprintf("%s%v", errorPrefix, v.Error())
		return localVarReturnValue, newErr
	}

	body, err := GunzipIfNeeded(localVarHTTPResponse)
	if err != nil {
		body.Close()
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	localVarBody, err := _ioutil.ReadAll(body)
	body.Close()
	if err != nil {
		return localVarReturnValue, _fmt.Errorf("%s%w", errorPrefix, err)
	}
	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: _fmt.Sprintf("%s%s", errorPrefix, err.Error()),
		}
		return localVarReturnValue, newErr
	}

	return localVarReturnValue, nil
}
